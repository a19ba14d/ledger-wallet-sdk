/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	Ledger *string `json:"ledger,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	Postings []Posting `json:"postings"`
	Reference *string `json:"reference,omitempty"`
	// Metadata associated with the wallet.
	Metadata map[string]string `json:"metadata"`
	Id int64 `json:"id"`
	PreCommitVolumes *map[string]map[string]Volume `json:"preCommitVolumes,omitempty"`
	PostCommitVolumes *map[string]map[string]Volume `json:"postCommitVolumes,omitempty"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(timestamp time.Time, postings []Posting, metadata map[string]string, id int64) *Transaction {
	this := Transaction{}
	this.Timestamp = timestamp
	this.Postings = postings
	this.Metadata = metadata
	this.Id = id
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetLedger returns the Ledger field value if set, zero value otherwise.
func (o *Transaction) GetLedger() string {
	if o == nil || IsNil(o.Ledger) {
		var ret string
		return ret
	}
	return *o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetLedgerOk() (*string, bool) {
	if o == nil || IsNil(o.Ledger) {
		return nil, false
	}
	return o.Ledger, true
}

// HasLedger returns a boolean if a field has been set.
func (o *Transaction) HasLedger() bool {
	if o != nil && !IsNil(o.Ledger) {
		return true
	}

	return false
}

// SetLedger gets a reference to the given string and assigns it to the Ledger field.
func (o *Transaction) SetLedger(v string) {
	o.Ledger = &v
}

// GetTimestamp returns the Timestamp field value
func (o *Transaction) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Transaction) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetPostings returns the Postings field value
func (o *Transaction) GetPostings() []Posting {
	if o == nil {
		var ret []Posting
		return ret
	}

	return o.Postings
}

// GetPostingsOk returns a tuple with the Postings field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetPostingsOk() ([]Posting, bool) {
	if o == nil {
		return nil, false
	}
	return o.Postings, true
}

// SetPostings sets field value
func (o *Transaction) SetPostings(v []Posting) {
	o.Postings = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Transaction) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Transaction) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Transaction) SetReference(v string) {
	o.Reference = &v
}

// GetMetadata returns the Metadata field value
func (o *Transaction) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetMetadataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Transaction) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetId returns the Id field value
func (o *Transaction) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transaction) SetId(v int64) {
	o.Id = v
}

// GetPreCommitVolumes returns the PreCommitVolumes field value if set, zero value otherwise.
func (o *Transaction) GetPreCommitVolumes() map[string]map[string]Volume {
	if o == nil || IsNil(o.PreCommitVolumes) {
		var ret map[string]map[string]Volume
		return ret
	}
	return *o.PreCommitVolumes
}

// GetPreCommitVolumesOk returns a tuple with the PreCommitVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPreCommitVolumesOk() (*map[string]map[string]Volume, bool) {
	if o == nil || IsNil(o.PreCommitVolumes) {
		return nil, false
	}
	return o.PreCommitVolumes, true
}

// HasPreCommitVolumes returns a boolean if a field has been set.
func (o *Transaction) HasPreCommitVolumes() bool {
	if o != nil && !IsNil(o.PreCommitVolumes) {
		return true
	}

	return false
}

// SetPreCommitVolumes gets a reference to the given map[string]map[string]Volume and assigns it to the PreCommitVolumes field.
func (o *Transaction) SetPreCommitVolumes(v map[string]map[string]Volume) {
	o.PreCommitVolumes = &v
}

// GetPostCommitVolumes returns the PostCommitVolumes field value if set, zero value otherwise.
func (o *Transaction) GetPostCommitVolumes() map[string]map[string]Volume {
	if o == nil || IsNil(o.PostCommitVolumes) {
		var ret map[string]map[string]Volume
		return ret
	}
	return *o.PostCommitVolumes
}

// GetPostCommitVolumesOk returns a tuple with the PostCommitVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPostCommitVolumesOk() (*map[string]map[string]Volume, bool) {
	if o == nil || IsNil(o.PostCommitVolumes) {
		return nil, false
	}
	return o.PostCommitVolumes, true
}

// HasPostCommitVolumes returns a boolean if a field has been set.
func (o *Transaction) HasPostCommitVolumes() bool {
	if o != nil && !IsNil(o.PostCommitVolumes) {
		return true
	}

	return false
}

// SetPostCommitVolumes gets a reference to the given map[string]map[string]Volume and assigns it to the PostCommitVolumes field.
func (o *Transaction) SetPostCommitVolumes(v map[string]map[string]Volume) {
	o.PostCommitVolumes = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ledger) {
		toSerialize["ledger"] = o.Ledger
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["postings"] = o.Postings
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["id"] = o.Id
	if !IsNil(o.PreCommitVolumes) {
		toSerialize["preCommitVolumes"] = o.PreCommitVolumes
	}
	if !IsNil(o.PostCommitVolumes) {
		toSerialize["postCommitVolumes"] = o.PostCommitVolumes
	}
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"postings",
		"metadata",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


