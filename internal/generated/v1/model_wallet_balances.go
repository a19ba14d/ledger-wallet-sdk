/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WalletBalances type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletBalances{}

// WalletBalances struct for WalletBalances
type WalletBalances struct {
	Main AssetHolder `json:"main"`
}

type _WalletBalances WalletBalances

// NewWalletBalances instantiates a new WalletBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletBalances(main AssetHolder) *WalletBalances {
	this := WalletBalances{}
	this.Main = main
	return &this
}

// NewWalletBalancesWithDefaults instantiates a new WalletBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletBalancesWithDefaults() *WalletBalances {
	this := WalletBalances{}
	return &this
}

// GetMain returns the Main field value
func (o *WalletBalances) GetMain() AssetHolder {
	if o == nil {
		var ret AssetHolder
		return ret
	}

	return o.Main
}

// GetMainOk returns a tuple with the Main field value
// and a boolean to check if the value has been set.
func (o *WalletBalances) GetMainOk() (*AssetHolder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Main, true
}

// SetMain sets field value
func (o *WalletBalances) SetMain(v AssetHolder) {
	o.Main = v
}

func (o WalletBalances) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletBalances) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["main"] = o.Main
	return toSerialize, nil
}

func (o *WalletBalances) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"main",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletBalances := _WalletBalances{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWalletBalances)

	if err != nil {
		return err
	}

	*o = WalletBalances(varWalletBalances)

	return err
}

type NullableWalletBalances struct {
	value *WalletBalances
	isSet bool
}

func (v NullableWalletBalances) Get() *WalletBalances {
	return v.value
}

func (v *NullableWalletBalances) Set(val *WalletBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletBalances(val *WalletBalances) *NullableWalletBalances {
	return &NullableWalletBalances{value: val, isSet: true}
}

func (v NullableWalletBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


