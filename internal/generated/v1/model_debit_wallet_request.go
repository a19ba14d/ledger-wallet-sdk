/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DebitWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebitWalletRequest{}

// DebitWalletRequest struct for DebitWalletRequest
type DebitWalletRequest struct {
	Amount Monetary `json:"amount"`
	// Set to true to create a pending hold. If false, the wallet will be debited immediately.
	Pending *bool `json:"pending,omitempty"`
	// Metadata associated with the wallet.
	Metadata map[string]string `json:"metadata"`
	Description *string `json:"description,omitempty"`
	Destination *Subject `json:"destination,omitempty"`
	Balances []string `json:"balances,omitempty"`
	// cannot be used in conjunction with `pending` property
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type _DebitWalletRequest DebitWalletRequest

// NewDebitWalletRequest instantiates a new DebitWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebitWalletRequest(amount Monetary, metadata map[string]string) *DebitWalletRequest {
	this := DebitWalletRequest{}
	this.Amount = amount
	this.Metadata = metadata
	return &this
}

// NewDebitWalletRequestWithDefaults instantiates a new DebitWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebitWalletRequestWithDefaults() *DebitWalletRequest {
	this := DebitWalletRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *DebitWalletRequest) GetAmount() Monetary {
	if o == nil {
		var ret Monetary
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetAmountOk() (*Monetary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DebitWalletRequest) SetAmount(v Monetary) {
	o.Amount = v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetPending() bool {
	if o == nil || IsNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *DebitWalletRequest) SetPending(v bool) {
	o.Pending = &v
}

// GetMetadata returns the Metadata field value
func (o *DebitWalletRequest) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *DebitWalletRequest) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DebitWalletRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetDestination() Subject {
	if o == nil || IsNil(o.Destination) {
		var ret Subject
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetDestinationOk() (*Subject, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given Subject and assigns it to the Destination field.
func (o *DebitWalletRequest) SetDestination(v Subject) {
	o.Destination = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetBalances() []string {
	if o == nil || IsNil(o.Balances) {
		var ret []string
		return ret
	}
	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetBalancesOk() ([]string, bool) {
	if o == nil || IsNil(o.Balances) {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasBalances() bool {
	if o != nil && !IsNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []string and assigns it to the Balances field.
func (o *DebitWalletRequest) SetBalances(v []string) {
	o.Balances = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DebitWalletRequest) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebitWalletRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DebitWalletRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *DebitWalletRequest) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o DebitWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebitWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Balances) {
		toSerialize["balances"] = o.Balances
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *DebitWalletRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDebitWalletRequest := _DebitWalletRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDebitWalletRequest)

	if err != nil {
		return err
	}

	*o = DebitWalletRequest(varDebitWalletRequest)

	return err
}

type NullableDebitWalletRequest struct {
	value *DebitWalletRequest
	isSet bool
}

func (v NullableDebitWalletRequest) Get() *DebitWalletRequest {
	return v.value
}

func (v *NullableDebitWalletRequest) Set(val *DebitWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDebitWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDebitWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebitWalletRequest(val *DebitWalletRequest) *NullableDebitWalletRequest {
	return &NullableDebitWalletRequest{value: val, isSet: true}
}

func (v NullableDebitWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebitWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


