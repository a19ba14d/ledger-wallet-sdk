/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WalletSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletSummary{}

// WalletSummary struct for WalletSummary
type WalletSummary struct {
	Balances []BalanceWithAssets `json:"balances"`
	AvailableFunds map[string]int64 `json:"availableFunds"`
	ExpiredFunds map[string]int64 `json:"expiredFunds"`
	ExpirableFunds map[string]int64 `json:"expirableFunds"`
	HoldFunds map[string]int64 `json:"holdFunds"`
}

type _WalletSummary WalletSummary

// NewWalletSummary instantiates a new WalletSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletSummary(balances []BalanceWithAssets, availableFunds map[string]int64, expiredFunds map[string]int64, expirableFunds map[string]int64, holdFunds map[string]int64) *WalletSummary {
	this := WalletSummary{}
	this.Balances = balances
	this.AvailableFunds = availableFunds
	this.ExpiredFunds = expiredFunds
	this.ExpirableFunds = expirableFunds
	this.HoldFunds = holdFunds
	return &this
}

// NewWalletSummaryWithDefaults instantiates a new WalletSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletSummaryWithDefaults() *WalletSummary {
	this := WalletSummary{}
	return &this
}

// GetBalances returns the Balances field value
func (o *WalletSummary) GetBalances() []BalanceWithAssets {
	if o == nil {
		var ret []BalanceWithAssets
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *WalletSummary) GetBalancesOk() ([]BalanceWithAssets, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balances, true
}

// SetBalances sets field value
func (o *WalletSummary) SetBalances(v []BalanceWithAssets) {
	o.Balances = v
}

// GetAvailableFunds returns the AvailableFunds field value
func (o *WalletSummary) GetAvailableFunds() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.AvailableFunds
}

// GetAvailableFundsOk returns a tuple with the AvailableFunds field value
// and a boolean to check if the value has been set.
func (o *WalletSummary) GetAvailableFundsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableFunds, true
}

// SetAvailableFunds sets field value
func (o *WalletSummary) SetAvailableFunds(v map[string]int64) {
	o.AvailableFunds = v
}

// GetExpiredFunds returns the ExpiredFunds field value
func (o *WalletSummary) GetExpiredFunds() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.ExpiredFunds
}

// GetExpiredFundsOk returns a tuple with the ExpiredFunds field value
// and a boolean to check if the value has been set.
func (o *WalletSummary) GetExpiredFundsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiredFunds, true
}

// SetExpiredFunds sets field value
func (o *WalletSummary) SetExpiredFunds(v map[string]int64) {
	o.ExpiredFunds = v
}

// GetExpirableFunds returns the ExpirableFunds field value
func (o *WalletSummary) GetExpirableFunds() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.ExpirableFunds
}

// GetExpirableFundsOk returns a tuple with the ExpirableFunds field value
// and a boolean to check if the value has been set.
func (o *WalletSummary) GetExpirableFundsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirableFunds, true
}

// SetExpirableFunds sets field value
func (o *WalletSummary) SetExpirableFunds(v map[string]int64) {
	o.ExpirableFunds = v
}

// GetHoldFunds returns the HoldFunds field value
func (o *WalletSummary) GetHoldFunds() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.HoldFunds
}

// GetHoldFundsOk returns a tuple with the HoldFunds field value
// and a boolean to check if the value has been set.
func (o *WalletSummary) GetHoldFundsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HoldFunds, true
}

// SetHoldFunds sets field value
func (o *WalletSummary) SetHoldFunds(v map[string]int64) {
	o.HoldFunds = v
}

func (o WalletSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balances"] = o.Balances
	toSerialize["availableFunds"] = o.AvailableFunds
	toSerialize["expiredFunds"] = o.ExpiredFunds
	toSerialize["expirableFunds"] = o.ExpirableFunds
	toSerialize["holdFunds"] = o.HoldFunds
	return toSerialize, nil
}

func (o *WalletSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"balances",
		"availableFunds",
		"expiredFunds",
		"expirableFunds",
		"holdFunds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletSummary := _WalletSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWalletSummary)

	if err != nil {
		return err
	}

	*o = WalletSummary(varWalletSummary)

	return err
}

type NullableWalletSummary struct {
	value *WalletSummary
	isSet bool
}

func (v NullableWalletSummary) Get() *WalletSummary {
	return v.value
}

func (v *NullableWalletSummary) Set(val *WalletSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletSummary(val *WalletSummary) *NullableWalletSummary {
	return &NullableWalletSummary{value: val, isSet: true}
}

func (v NullableWalletSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


