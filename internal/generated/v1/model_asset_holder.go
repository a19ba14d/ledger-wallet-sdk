/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time" // Add time import for *time.Time
)

// checks if the AssetHolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetHolder{}

// AssetHolder struct for AssetHolder
type AssetHolder struct {
	Assets    map[string]int64 `json:"assets"`
	ExpiresAt *time.Time       `json:"expiresAt,omitempty"` // Added field to match API response
	Priority  *int             `json:"priority,omitempty"`  // Added field to match API response (using pointer for omitempty)
}

type _AssetHolder AssetHolder

// NewAssetHolder instantiates a new AssetHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
// Updated constructor to potentially include new fields if needed, though often defaults are fine
func NewAssetHolder(assets map[string]int64) *AssetHolder {
	this := AssetHolder{}
	this.Assets = assets
	// Default values for ExpiresAt and Priority are nil (zero value for pointers)
	return &this
}

// NewAssetHolderWithDefaults instantiates a new AssetHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
// Updated constructor with defaults
func NewAssetHolderWithDefaults() *AssetHolder {
	this := AssetHolder{}
	// Default values for ExpiresAt and Priority are nil (zero value for pointers)
	return &this
}

// GetAssets returns the Assets field value
func (o *AssetHolder) GetAssets() map[string]int64 {
	if o == nil {
		var ret map[string]int64
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *AssetHolder) GetAssetsOk() (*map[string]int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *AssetHolder) SetAssets(v map[string]int64) {
	o.Assets = v
}

func (o AssetHolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetHolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assets"] = o.Assets
	if o.ExpiresAt != nil {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

// No changes needed to UnmarshalJSON logic itself,
// as adding fields to the struct is enough for the decoder
// when DisallowUnknownFields is used (it just needs to know the fields exist).
// The requiredProperties check also remains unchanged as these new fields are optional.
func (o *AssetHolder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetHolder := _AssetHolder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetHolder)

	if err != nil {
		return err
	}

	*o = AssetHolder(varAssetHolder)

	return err
}

type NullableAssetHolder struct {
	value *AssetHolder
	isSet bool
}

func (v NullableAssetHolder) Get() *AssetHolder {
	return v.value
}

func (v *NullableAssetHolder) Set(val *AssetHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetHolder(val *AssetHolder) *NullableAssetHolder {
	return &NullableAssetHolder{value: val, isSet: true}
}

func (v NullableAssetHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


