/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Hold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hold{}

// Hold struct for Hold
type Hold struct {
	// The unique ID of the hold.
	Id string `json:"id"`
	// The ID of the wallet the hold is associated with.
	WalletID string `json:"walletID"`
	// Metadata associated with the hold.
	Metadata map[string]string `json:"metadata"`
	Asset *string `json:"asset,omitempty"`
	Description string `json:"description"`
	Destination *Subject `json:"destination,omitempty"`
}

type _Hold Hold

// NewHold instantiates a new Hold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHold(id string, walletID string, metadata map[string]string, description string) *Hold {
	this := Hold{}
	this.Id = id
	this.WalletID = walletID
	this.Metadata = metadata
	this.Description = description
	return &this
}

// NewHoldWithDefaults instantiates a new Hold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldWithDefaults() *Hold {
	this := Hold{}
	return &this
}

// GetId returns the Id field value
func (o *Hold) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Hold) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Hold) SetId(v string) {
	o.Id = v
}

// GetWalletID returns the WalletID field value
func (o *Hold) GetWalletID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletID
}

// GetWalletIDOk returns a tuple with the WalletID field value
// and a boolean to check if the value has been set.
func (o *Hold) GetWalletIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletID, true
}

// SetWalletID sets field value
func (o *Hold) SetWalletID(v string) {
	o.WalletID = v
}

// GetMetadata returns the Metadata field value
func (o *Hold) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Hold) GetMetadataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Hold) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *Hold) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hold) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *Hold) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *Hold) SetAsset(v string) {
	o.Asset = &v
}

// GetDescription returns the Description field value
func (o *Hold) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Hold) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Hold) SetDescription(v string) {
	o.Description = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *Hold) GetDestination() Subject {
	if o == nil || IsNil(o.Destination) {
		var ret Subject
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hold) GetDestinationOk() (*Subject, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *Hold) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given Subject and assigns it to the Destination field.
func (o *Hold) SetDestination(v Subject) {
	o.Destination = &v
}

func (o Hold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["walletID"] = o.WalletID
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	toSerialize["description"] = o.Description
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	return toSerialize, nil
}

func (o *Hold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"walletID",
		"metadata",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHold := _Hold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHold)

	if err != nil {
		return err
	}

	*o = Hold(varHold)

	return err
}

type NullableHold struct {
	value *Hold
	isSet bool
}

func (v NullableHold) Get() *Hold {
	return v.value
}

func (v *NullableHold) Set(val *Hold) {
	v.value = val
	v.isSet = true
}

func (v NullableHold) IsSet() bool {
	return v.isSet
}

func (v *NullableHold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHold(val *Hold) *NullableHold {
	return &NullableHold{value: val, isSet: true}
}

func (v NullableHold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


