/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreditWalletRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditWalletRequest{}

// CreditWalletRequest struct for CreditWalletRequest
type CreditWalletRequest struct {
	Amount Monetary `json:"amount"`
	// Metadata associated with the wallet.
	Metadata map[string]string `json:"metadata,omitempty"`
	Reference *string `json:"reference,omitempty"`
	Sources []Subject `json:"sources,omitempty"`
	// The balance to credit
	Balance *string `json:"balance,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

type _CreditWalletRequest CreditWalletRequest

// NewCreditWalletRequest instantiates a new CreditWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditWalletRequest(amount Monetary) *CreditWalletRequest {
	this := CreditWalletRequest{}
	this.Amount = amount
	return &this
}

// NewCreditWalletRequestWithDefaults instantiates a new CreditWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditWalletRequestWithDefaults() *CreditWalletRequest {
	this := CreditWalletRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CreditWalletRequest) GetAmount() Monetary {
	if o == nil {
		var ret Monetary
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreditWalletRequest) GetAmountOk() (*Monetary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreditWalletRequest) SetAmount(v Monetary) {
	o.Amount = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditWalletRequest) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditWalletRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreditWalletRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreditWalletRequest) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *CreditWalletRequest) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditWalletRequest) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *CreditWalletRequest) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *CreditWalletRequest) SetReference(v string) {
	o.Reference = &v
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditWalletRequest) GetSources() []Subject {
	if o == nil {
		var ret []Subject
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditWalletRequest) GetSourcesOk() ([]Subject, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *CreditWalletRequest) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Subject and assigns it to the Sources field.
func (o *CreditWalletRequest) SetSources(v []Subject) {
	o.Sources = v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *CreditWalletRequest) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditWalletRequest) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *CreditWalletRequest) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *CreditWalletRequest) SetBalance(v string) {
	o.Balance = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CreditWalletRequest) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditWalletRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CreditWalletRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *CreditWalletRequest) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o CreditWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditWalletRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *CreditWalletRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditWalletRequest := _CreditWalletRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditWalletRequest)

	if err != nil {
		return err
	}

	*o = CreditWalletRequest(varCreditWalletRequest)

	return err
}

type NullableCreditWalletRequest struct {
	value *CreditWalletRequest
	isSet bool
}

func (v NullableCreditWalletRequest) Get() *CreditWalletRequest {
	return v.value
}

func (v *NullableCreditWalletRequest) Set(val *CreditWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditWalletRequest(val *CreditWalletRequest) *NullableCreditWalletRequest {
	return &NullableCreditWalletRequest{value: val, isSet: true}
}

func (v NullableCreditWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


