/*
Formance Simple Wallets Service API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package walletsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateWalletResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWalletResponse{}

// CreateWalletResponse struct for CreateWalletResponse
type CreateWalletResponse struct {
	Data Wallet `json:"data"`
}

type _CreateWalletResponse CreateWalletResponse

// NewCreateWalletResponse instantiates a new CreateWalletResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWalletResponse(data Wallet) *CreateWalletResponse {
	this := CreateWalletResponse{}
	this.Data = data
	return &this
}

// NewCreateWalletResponseWithDefaults instantiates a new CreateWalletResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWalletResponseWithDefaults() *CreateWalletResponse {
	this := CreateWalletResponse{}
	return &this
}

// GetData returns the Data field value
func (o *CreateWalletResponse) GetData() Wallet {
	if o == nil {
		var ret Wallet
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateWalletResponse) GetDataOk() (*Wallet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateWalletResponse) SetData(v Wallet) {
	o.Data = v
}

func (o CreateWalletResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWalletResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *CreateWalletResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWalletResponse := _CreateWalletResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWalletResponse)

	if err != nil {
		return err
	}

	*o = CreateWalletResponse(varCreateWalletResponse)

	return err
}

type NullableCreateWalletResponse struct {
	value *CreateWalletResponse
	isSet bool
}

func (v NullableCreateWalletResponse) Get() *CreateWalletResponse {
	return v.value
}

func (v *NullableCreateWalletResponse) Set(val *CreateWalletResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWalletResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWalletResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWalletResponse(val *CreateWalletResponse) *NullableCreateWalletResponse {
	return &NullableCreateWalletResponse{value: val, isSet: true}
}

func (v NullableCreateWalletResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWalletResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


